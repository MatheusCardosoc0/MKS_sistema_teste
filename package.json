{
  "private": true,
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start",
    "test": "jest --watch",
    "test:ci": "jest --ci"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.1",
    "next": "latest",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.0.5",
    "styled-components": "^5.3.5"
  },
  "devDependencies": {
    "@babel/core": "^7.20.12",
    "@babel/preset-env": "^7.20.2",
    "@babel/preset-react": "^7.18.6",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.4.3",
    "@types/node": "^18.0.0",
    "@types/react": "^18.0.14",
    "@types/react-dom": "^18.0.5",
    "@types/styled-components": "^5.1.25",
    "babel-jest": "^29.4.1",
    "jest": "^29.4.1",
    "jest-environment-jsdom": "^29.4.1",
    "typescript": "^4.7.4"
  },
  "name": "mks_sistemas",
  "description": "This example features how you use a different styling solution than [styled-jsx](https://github.com/vercel/styled-jsx) that also supports universal styles. That means we can serve the required styles for the first render within the HTML and then load the rest in the client. In this case we are using [styled-components](https://github.com/styled-components/styled-components).",
  "version": "1.0.0",
  "main": "next.config.js",
  "author": "",
  "license": "ISC"
}
